name: mypy-primer
suffix: mypy
is_published: true
upcoming: true
tags:
  - python
  - typing
video_link:
title: Mypy Primer
instructor: tusharsadhwani
image: mypy-image.png
short_introduction: Learn how to implement static type checking in Python
description: |
  It should be no surprise that Python is a dynamically typed language. The
  simplicity of not having to deal with types is one of the biggest reasons
  people choose to learn Python over other languages.

  But dynamic typing has its own problems as well, it takes away a great feature
  that statically typed languages like C++ and Java provide: You can't
  accidentally pass data of the wrong type in them. If you pass an integer where
  a string is expected in Java, your code won't compile. But in Python, your
  code will start just fine, until it crashes with a TypeError while running.

  Wouldn't it be great, if you could optionally write types in Python, to get
  the same type checking guarantees that statically typed languages have? Mypy
  lets you do exactly that!

  Mypy is Python's official type checker. It's a really valuable and mature tool
  that interacts seamlessly with Python, to provide really powerful features
  like type safety, null safety, static duck typing, and generics, allowing you
  to have your Python code checked with a solid type system.

  Mypy Primer will take you from knowing nothing about mypy, to being able to
  skillfully implement static type checking in your projects.
chapters:
  - name: introduction
    title: Introduction to mypy
    description: What is mypy, and how can I use it?
    lessons:
      - introduction/what-is-mypy.md
      - introduction/intro-to-type-annotations.md
      - introduction/using-mypy.md
      - introduction/installing-mypy.md
  - name: mypy-errors
    title: Mypy errors, and how to debug them
    description: |
      We'll see what kind of errors mypy will throw at you, how to configure mypy
      to make the best use of it, and try to figure out what its errors mean.
    lessons:
      - mypy-errors/why-mypy-doesnt-error-here.md
      - mypy-errors/mypy-configuration.md
      - mypy-errors/type-checking-examples.md
      - mypy-errors/reading-mypy-error-messages.md
      - mypy-errors/using-reveal-type.md
  - name: the-typing-module
    title: Mypy types, and the typing module
    description: |
      Modern Python has a LOT of type checking features baked into it. In this
      chapter we will see a glimpse of what the typing module has to offer.
    lessons:
      - the-typing-module/lists-dictionaries-collections.md
      - the-typing-module/union-optional.md
      - the-typing-module/type-checking-classes.md
      - the-typing-module/typing-args-kwargs.md
      - the-typing-module/any-type.md
  - name: typing-module-deep-dive
    title: Diving deep into the typing module
    description: |
      The typing module also provides various functions and base classes, that
      create the basis of a lot of concepts of mypy's type system. In this chapter
      we will dive deep into these functionalities.
    lessons:
      - typing-module-deep-dive/static-duck-typing.md
      - typing-module-deep-dive/the-namedtuple-class.md
      - typing-module-deep-dive/the-typeddict-class.md
      - typing-module-deep-dive/function-overloading.md
  - name: advanced-type-checking
    title: Some advanced type checking concepts
    description: |
      In this chapter we will learn some concepts, tips and tricks on how to
      properly type-check code using some of the more complicated Python concepts.
    lessons:
      - advanced-type-checking/typing-decorators.md
      - advanced-type-checking/typing-generators.md
      - advanced-type-checking/the-type-type.md
      - advanced-type-checking/type-checking-exercises.md
  - name: conclusion
    title: Conclusion
    description: |
      In this chapter, we will wrap up the series, and understand where type
      checking sits in the ecosystem of Python, and your software development
      process.
    lessons:
      - conclusion/type-checking-or-tests.md
      - conclusion/integrating-mypy.md
